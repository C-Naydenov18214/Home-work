first:: (Int,Int) -> Int
first (a,_) = a


----------
x = [1,2,3] Cоздание объединения двух списков  
y = [4,5]
c = x ++ y
----------


doubleList::[Int]->[Int] 
doubleList [] = [] --- задаем список 
doubleList xs = (2*head xs): --отсекаем начало списка
  doubleList (tail xs) -- возвращаем без первого элемента 

 doubleList::[Int]->[Int] 
doubleList [] = []
doubleList (x:xs = 2*x : --отсекаем начало списка
  doubleList xs -- возвращаем без первого элемента

myLen [] = 0
myLen (x:xs) = (myLen xs) + 1 -- рекурсия для подсчета кол элементов в списке     
                              -- x:xs забирает первый элемент 
                              --- xs возвращает остальные элементы 
------------------------------------
octList::[Int]->[Int]                                
octList [] == []
octList xs = doubleList 
  (doubleList(doubleList xs))	
тоже сомое но не работает 
octList::[Int]->[Int]                                
octList [] == []
octList xs = doubleList . doubleList . doubleList 
 ---------------------

 head xs -- возвращает голову 
 last -- возвращает последний 
 xs !! n возвращает н-ный элемент 
 tail  все кроме первого
 init  всекроме последнего 
 reverse - развернуть список 
 lenght xs --слина списка 
 drop n xs -- удалить n первых элементов 
 take n xs -- взять первые n  элементов списка 
 splitAt n xs -- возвращает пару списков, n-нный элмент входит во второй
 1:2:3:[] :- что то вставлем в спиосок
 -------------------
 O(1): -- время работы   
x:xs -- присоединение к списку на первое место 
tail xs - все кроме первого 
head xs - получить голову списка 

O(n)
lenght xs
xs !! n
drop n xs
xs++ys -- объединение зависит только длинны XS
-----------------------------------------------

mult::Int->Int->Int
mult a b = a*b
функция 
-------------------------
myMap::[a]->(a->b)->[b] ---- в скобках наша функция  ПРИМЕР myMap [1,2] (\x->"1") ответ (["1","1"])
myMap [] _ = []
myMap (x:xs) f = (f x):myMap xs f
----------------------
myAdd a b = a+b


-------------------
